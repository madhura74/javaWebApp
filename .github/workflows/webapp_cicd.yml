# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java WebApp CICD

on:
  push:
    branches: 
        - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Maven Test
      run: mvn test
      
    - name: Maven Package
      run: mvn -B package -DskipTests -f ./pom.xml

    -   name: Configure AWS credentials

        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

    -   name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

    -   name: set env
        id: vars
        run: |
            echo ::set-output name=github_short_sha::$(echo ${GITHUB_SHA:0:7})

    -   name: Build & Push Image
        id: build-image
        env:
            DOCKER_BUILDKIT: 1
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.AWS_REPO_NAME }}
            IMAGE_TAG: ${{ steps.vars.outputs.github_short_sha }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
    -   name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
            version: 'v1.24.0' 
            id: install
              
    -   name: update config
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            AWS_EKS_NAME: ${{ secrets.AWS_EKS_NAME }}
        run: |
            echo $AWS_REGION $AWS_EKS_NAME
            aws eks update-kubeconfig --name mad-eks-01 --region ap-south-1
  
            
    -   name: Deploy to EKS
        run: |
              kubectl apply -f ./manifests/namespace-1.yaml
              kubectl apply -f ./manifests/deploy-webapp.yaml
              kubectl apply -f ./manifests/service-webapp.yaml
              
